#if 1


#pragma comment(lib, "bdd.lib")
#include "bdd.h"
#include <fstream>
#include <math.h>
#include <iomanip>


// **********************************************************************

#define N_VAR		144			// §é§Ú§ã§Ý§à §Ò§å§Ý§Ö§Ó§í§ç §á§Ö§â§Ö§Þ§Ö§ß§ß§í§ç 9*4*4=144
#define N				9				// §é§Ú§ã§Ý§à §à§Ò§ì§Ö§Ü§ä§à§Ó
#define SqrtN		3
#define M				4				// §é§Ú§ã§Ý§à §ã§Ó§à§Û§ã§ä§Ó
#define LOG_N		4

// **********************************************************************

#define AND			&
#define OR			|
#define XOR			^
#define NOT			!

// **********************************************************************
#define NAME_A						0
#define NAME_B						1
#define NAME_C						2
#define NAME_D						3
#define NAME_E						4
#define NAME_F						5
#define NAME_G						6
#define NAME_H						7
#define NAME_I						8
// ----------------------------------
#define TEL_NUM_0					0
#define TEL_NUM_1					1
#define TEL_NUM_2					2
#define TEL_NUM_3					3
#define TEL_NUM_4					4
#define TEL_NUM_5					5
#define TEL_NUM_6					6
#define TEL_NUM_7					7
#define TEL_NUM_8					8
// ----------------------------------
#define PHONE_APPLE				0
#define PHONE_XIAOMI			1
#define PHONE_HUAWEI			2
#define PHONE_SAMSUNG		3
#define PHONE_REALME			4
#define PHONE_HTC					5
#define PHONE_VIVO				6
#define PHONE_GOOGLE			7
#define PHONE_OPPO				8
// ----------------------------------
#define FOOD_CUKE					0
#define FOOD_WATERML			1
#define FOOD_PUMPKIN			2
#define FOOD_CHINKEN			3
#define FOOD_PIG					4
#define FOOD_BEEF					5
#define FOOD_CABBAGE			6
#define FOOD_BANANA			7
#define FOOD_PHOTO				8
// **********************************************************************

using namespace std;

ofstream out;
void fun(char* varset, int size); // §æ§å§ß§Ü§è§Ú§ñ, §Ú§ã§á§à§Ý§î§Ù§å§Ö§Þ§Ñ§ñ §Õ§Ý§ñ §Ó§í§Ó§à§Õ§Ñ §â§Ö§ê§Ö§ß§Ú§Û

// **********************************************************************

void main()
{
	// ³õÊ¼»¯ §Ú§ß§Ú§è§Ú§Ñ§Ý§Ú§Ù§Ñ§è§Ú§ñ
	bdd_init(10000000, 1000000);
	bdd_setvarnum(N_VAR);

	// ->--- §Ó§Ó§à§Õ§Ú§Þ §æ§å§ß§Ü§è§Ú§ð p(k, i, j) §ã§Ý§Ö§Õ§å§ð§ë§Ú§Þ §à§Ò§â§Ñ§Ù§à§Þ ( pk[i][j] ):
	bdd p_name[N][N];		// §ª§ß§Ú§è§Ú§Ñ§Ý§í §æ§Ñ§Þ§Ú§Ý§Ú§Ú
	bdd p_tel_num[N][N];	// §±§à§ã§Ý§Ö§Õ§ß§ñ§ñ §è§Ú§æ§â§Ñ §ä§Ö§Ý§Ö§æ§à§ß§Ñ
	bdd p_phone[N][N];		// §®§Ñ§â§Ü§Ñ §ä§Ö§Ý§Ö§æ§à§ß§Ñ
	bdd p_food[N][N];			// §¹§ä§à §Ý§ð§Ò§Ú§ä §Ö§ã§ä§î

	int grid[SqrtN][SqrtN];
	int x = 0;
	for (unsigned iv = 0; iv < SqrtN; iv++)
	{
		for (unsigned ig = 0; ig < SqrtN; ig++)
		{
			grid[iv][ig] = x;
			x++;
		}
	}

	unsigned I = 0;
	for (unsigned i = 0; i < N; i++)
	{
		for (unsigned j = 0; j < N; j++)
		{
			p_name[i][j] = bddtrue;
			p_tel_num[i][j] = bddtrue;
			p_phone[i][j] = bddtrue;
			p_food[i][j] = bddtrue;
			for (unsigned k = 0; k < LOG_N; k++) {
				p_name[i][j] &= ((j >> k) & 1) ? bdd_ithvar(I + k) : bdd_nithvar(I + k);
				p_tel_num[i][j] &= ((j >> k) & 1) ? bdd_ithvar(I + LOG_N + k) : bdd_nithvar(I + LOG_N + k);
				p_phone[i][j] &= ((j >> k) & 1) ? bdd_ithvar(I + LOG_N * 2 + k) : bdd_nithvar(I + LOG_N * 2 + k);
				p_food[i][j] &= ((j >> k) & 1) ? bdd_ithvar(I + LOG_N * 3 + k) : bdd_nithvar(I + LOG_N * 3 + k);
			}
		}
		I += LOG_N * M;
	}

	bdd t_bdd = bddtrue;






	// §°§¤§²§¡§¯§ª§¹§¦§¯§ª§Á
	//  >>>>>>>>>>>>>>>>>> §°§Ô§â§Ñ§ß§Ú§é§Ö§ß§Ú§ñ I §ä§Ú§á§Ñ. §£ §Ù§Ñ§Õ§Ñ§ß§Ú§Ú: 6, §Õ§à§á§à§Ý§ß§Ú§ä§Ö§Ý§î§ß§í§Ö: ? <<<<<<<<<<<<<<<<<<<<
	// 1.	`F` §Ø§Ú§Ó§Ö§ä §Ó  §Õ§à§Þ§Ö 1
	t_bdd &= p_name[1][NAME_F];

	// 2.	§¬§ä§à §á§à§Ý§î§Ù§å§Ö§ä§ã§ñ §ä§Ö§Ý§Ö§æ§à§ß§Ñ Samsung, §Ø§Ú§Ó§Ö§ä §Ó §Õ§à§Þ§Ö 5
	t_bdd &= p_phone[5][PHONE_SAMSUNG];

	// 3.	`E` §Ø§Ú§Ó§Ö§ä §Ó §Õ§à§Þ§Ö 4
	t_bdd &= p_name[4][NAME_E];

	// 4.	§¬§ä§à §Ý§ð§Ò§Ú§ä §Ö§ã§ä§î §Ô§à§Ó§ñ§Õ§Ú§ß§å, §Ø§Ú§Ó§Ö§ä §Ó §Õ§à§Þ§Ö 0
	t_bdd &= p_food[0][FOOD_BEEF];

	// 5.	§¬§ä§à §á§à§Ý§î§Ù§å§Ö§ä§ã§ñ §ä§Ö§Ý§Ö§æ§à§ß§à§Þ Google, §Ø§Ú§Ó§Ö§ä §Ó §Õ§à§Þ§Ö 7
	t_bdd &= p_phone[7][PHONE_GOOGLE];

	// 6.	§¬§ä§à §Ý§ð§Ò§Ú§ä §Ñ§â§Ò§å§Ù, §Ø§Ú§Ó§Ö§ä §Ó §Õ§à§Þ§Ö 6
	t_bdd &= p_food[6][FOOD_WATERML];

	//----- §Õ§à§á§à§Ý§ß§Ú§ä§Ö§Ý§î§ß§í§Ö §å§ã§Ý§à§Ó§Ú§ñ -------


	cout << " > Constraints type 1 have been applied.\n"
		<< "Number of nodes : " << bdd_nodecount(t_bdd) << "\n"
		<< "Number of solution(s): " << std::fixed << std::setprecision(0) << (double)bdd_satcount(t_bdd) << "\n\n";







	//  >>>>>>>> §°§Ô§â§Ñ§ß§Ú§é§Ö§ß§Ú§ñ II §ä§Ú§á§Ñ. §£ §Ù§Ñ§Õ§Ñ§ß§Ú§Ú: 3, §Õ§à§á§à§Ý§ß§Ú§ä§Ö§Ý§î§ß§í§Ö: ? <<<<<<<
	for (unsigned t = 0; t < N; t++)
	{
		//	1.	§°§Ò§Ý§Ñ§Õ§Ñ§ä§Ö§Ý§Ú §ä§Ö§Ý§Ö§æ§à§ß§à§Ó Google §Ý§ð§Ò§ñ§ä §Ö§ã§ä§î §Ü§å§â§Ú§è§å
		t_bdd &= NOT(	p_phone[t][PHONE_GOOGLE]	XOR		p_food[t][FOOD_CHINKEN]	);

		//	2.	§´§Ö, §é§î§ñ §á§à§ã§Ý§Ö§Õ§ß§ñ§ñ §è§Ú§æ§â§Ñ §ß§à§Þ§Ö§â§Ñ §ä§Ö§Ý§Ö§æ§à§ß§Ñ §â§Ñ§Ó§ß§Ñ 5, §Ý§ð§Ò§ñ§ä §Ö§ã§ä§î §Ò§Ñ§ß§Ñ§ß§í
		t_bdd &= NOT(	p_tel_num[t][TEL_NUM_5]			XOR		p_food[t][FOOD_BANANA]		);

		//	3.	§°§Ò§Ý§Ñ§Õ§Ñ§ä§Ö§Ý§Ú §ä§Ö§Ý§Ö§æ§à§ß§à§Ó Huawei, §á§à§ã§Ý§Ö§Õ§ß§ñ§ñ §è§Ú§æ§â§Ñ §ß§à§Þ§Ö§â§Ñ §ä§Ö§Ý§Ö§æ§à§ß§Ñ §â§Ñ§Ó§ß§Ñ 1
		t_bdd &= NOT(	p_phone[t][PHONE_HUAWEI]	XOR		p_tel_num[t][TEL_NUM_1]		);

		//----- §Õ§à§á§à§Ý§ß§Ú§ä§Ö§Ý§î§ß§í§Ö §å§ã§Ý§à§Ó§Ú§ñ -------
		//task &= !(p_name[t][6] ^ p_tel_num[t][3]); //22.	§®§í§ê§î §Ù§à§Ó§å§ä §®§Ñ§â§Ü. (n2)
		//task &= !(p_name[t][3] ^ p_tel_num[t][5]); //23.	§§§Ø§Ñ §Ù§à§Ó§å§ä §¶§×§Õ§à§â. (n2)
		//task &= !(p_name[t][4] ^ p_food[t][2]); //24.	§­§Ö§Ó §á§î§×§ä §Ü§à§Ü§Ñ-§Ü§à§Ý§Ñ. (n2)
		//task &= !(p_name[t][2] ^ p_phone[t][6]); //25.	§°§Ý§Ö§ß§î §Ú§Ô§â§Ñ§Ö§ä §ß§Ñ §Ñ§â§æ§Ö. (n2)
		//task &= !(p_tel_num[t][8] ^ p_food[t][3]); //26.	§±§à§Ý§Ú§ß§Ñ §á§î§×§ä §Ó§à§Õ§å. (n2)
		//task &= !(p_name[t][1] ^ p_tel_num[t][7]); //27.	§£§à§Ý§Ü§Ñ §Ù§à§Ó§å§ä §£§Ö§â§Ñ. (n2)
		//task &= !(p_name[t][3] ^ p_phone[t][4]); //28.	§§§Ø §Ú§Ô§â§Ñ§Ö§ä §ß§Ñ §ã§Ñ§Ü§ã§à§æ§à§ß§Ö. (n2)
		//task &= !(p_food[t][2] ^ p_phone[t][5]); //29.	§¨§Ú§Ó§à§ä§ß§à§Ö, §Ü§à§ä§à§â§à§Ö §á§î§×§ä §Ü§à§Ü§Ñ-§Ü§à§Ý§Ñ, §Ú§Ô§â§Ñ§Ö§ä §ß§Ñ §Ò§Ñ§ñ§ß§Ö. (n2)
		//task &= !(p_name[t][7] ^ p_food[t][8]); //30.	§¬§à§ä §á§î§×§ä §Þ§à§Ý§à§Ü§à. (n2)
		//task &= !(p_name[t][1] ^ p_food[t][6]); //31.	§£§à§Ý§Ü §á§î§×§ä §Ó§à§Õ§Ü§å. (n2)
	}
	cout << " > Constraints type 2 have been applied.\n"
		<< "Number of nodes : " << bdd_nodecount(t_bdd) << "\n"
		<< "Number of solution(s): " << std::fixed << std::setprecision(0) << (double)bdd_satcount(t_bdd) << "\n\n";









	//  >>>>>>>>>>>>>>>>>>>>>> §°§Ô§â§Ñ§ß§Ú§é§Ö§ß§Ú§ñ III §ä§Ú§á§Ñ. §£ §Ù§Ñ§Õ§Ñ§ß§Ú§Ú: 5. <<<<<<<<<<<<<<<<<<<<<<<<
	// 1.	§¹§Ö§Ý§à§Ó§Ö§Ü, §Ø§Ú§Ó§å§ë§Ú§Ö §á§à§Õ `C`, §Ý§ð§Ò§ñ§ä §Ü§Ñ§â§ä§à§æ§Ö§Ý§î
	t_bdd		&=		NOT p_name[		grid[2][0]		][NAME_C];
	t_bdd		&=		NOT p_name[		grid[2][2]		][NAME_C];
	t_bdd		&=		NOT p_food[			grid[0][0]		][FOOD_PHOTO];
	t_bdd		&=		NOT p_food[			grid[0][2]		][FOOD_PHOTO];

#if 0
	for (unsigned iv = 0; iv < SqrtN; iv++)
	{
			t_bdd &=		NOT p_name[		grid[iv][0]					][NAME_C]
							& NOT p_food[			grid[iv][SqrtN - 1]		][FOOD_PHOTO];
	}

	for (unsigned ig = 0; ig < SqrtN; ig++)
	{
		t_bdd &=			NOT p_name[		grid[0][ig]				][NAME_C]
							& NOT p_food[		grid[SqrtN - 1][ig]		][FOOD_PHOTO];
	}

	for (unsigned iv = 1; iv < SqrtN; iv++)
	{
		for (unsigned ig = 1; ig < SqrtN; ig++)
		{
			t_bdd &=		NOT (			p_name[		grid[iv][ig]				][NAME_C]
											XOR p_food[		grid[iv - 1][ig - 1]		][FOOD_PHOTO]
										);
		}
	}


	// 2.	§¹§Ö§Ý§à§Ó§Ö§Ü, §Ø§Ú§Ó§å§ë§Ú§Û §á§à§Õ §é§Ö§Ý§à§Ó§Ö§Ü§à§Þ, §Ü§à§ä§à§â§í§Û §á§à§Ý§î§Ù§å§Ö§ä§ã§ñ §ä§Ö§Ý§Ö§æ§à§ß§à§Þ Apple, §Ú§Þ§Ö§Ö§ä §á§à§ã§Ý§Ö§Õ§ß§ñ§ñ §è§Ú§æ§â§Ñ §ß§à§Þ§Ö§â§Ñ §ä§Ö§Ý§Ö§æ§à§ß§Ñ §â§Ñ§Ó§ß§Ñ 8
	for (unsigned iv = 0; iv < SqrtN; iv++)
	{
			t_bdd &=		NOT p_phone[		grid[iv][0]					][PHONE_APPLE]
							& NOT p_tel_num[		grid[iv][SqrtN - 1]	][TEL_NUM_8];
	}

	for (unsigned ig = 0; ig < SqrtN; ig++)
	{
		t_bdd &=			NOT p_phone[		grid[0][ig]					][PHONE_APPLE]
							& NOT p_tel_num[		grid[SqrtN - 1][ig]	][TEL_NUM_8];
	}

	for (unsigned iv = 1; iv < SqrtN; iv++)
	{
		for (unsigned ig = 1; ig < SqrtN; ig++)
		{
			t_bdd &=		NOT (			p_phone[		grid[iv][ig]						][PHONE_APPLE]
											XOR p_tel_num[		grid[iv - 1][ig - 1]		][TEL_NUM_8]
										);
		}
	}

	//	3.	`C` §Ø§Ú§Ó§Ö§ä §ß§Ú§Ø§Ö `E`
		for (unsigned iv = 0; iv < SqrtN; iv++)
	{
			t_bdd &=		NOT p_name[		grid[iv][0]					][NAME_C]
							& NOT p_name[		grid[iv][SqrtN - 1]		][NAME_E];
	}

	for (unsigned ig = 0; ig < SqrtN; ig++)
	{
		t_bdd &=			NOT p_name[		grid[0][ig]					][NAME_C]
							& NOT p_name[		grid[SqrtN - 1][ig]		][NAME_E];
	}

	for (unsigned iv = 1; iv < SqrtN; iv++)
	{
		for (unsigned ig = 1; ig < SqrtN; ig++)
		{
			t_bdd &=		NOT(			p_name[		grid[iv][ig]					][NAME_C]
										XOR p_name[		grid[iv - 1][ig - 1]		][NAME_E]);
		}
	}

	//	4.	§¹§Ö§Ý§à§Ó§Ö§Ü, §Ü§à§ä§à§â§í§Û §Ø§Ú§Ó§Ö§ä §á§à§Õ `B`, §á§à§Ý§î§Ù§å§Ö§ä§ã§ñ §ä§Ö§Ý§Ö§æ§à§ß§à§Þ HTC
	for (unsigned iv = 0; iv < SqrtN; iv++)
	{
			t_bdd &=		NOT p_name[		grid[iv][0]					][NAME_B]
							& NOT p_name[		grid[iv][SqrtN - 1]		][PHONE_HTC];
	}

	for (unsigned ig = 0; ig < SqrtN; ig++)
	{
		t_bdd &=			NOT p_name[		grid[0][ig]				][NAME_B]
							& NOT p_phone[		grid[SqrtN - 1][ig]	][PHONE_HTC];
	}

	for (unsigned iv = 1; iv < SqrtN; iv++)
	{
		for (unsigned ig = 1; ig < SqrtN; ig++)
		{
			t_bdd &= NOT(		p_name[		grid[iv][ig]					][NAME_B]
								XOR p_phone[		grid[iv - 1][ig - 1]		][PHONE_HTC]
								);
		}
	}

	//	5.	§¹§Ö§Ý§à§Ó§Ö§Ü, §Ü§à§ä§à§â§í§Û §Ø§Ú§Ó§Ö§ä §á§à§Õ §ä§Ö§Ý§Ö§æ§à§ß§à§Þ Vivo, §Ý§ð§Ò§Ú§ä §Ö§ã§ä§î §Ü§Ñ§á§å§ã§ä§å
	for (unsigned iv = 0; iv < SqrtN; iv++)
	{
			t_bdd &=		NOT p_phone[		grid[iv][0]					][PHONE_VIVO]
							& NOT p_food[			grid[iv][SqrtN - 1]			][FOOD_CABBAGE];
	}

	for (unsigned ig = 0; ig < SqrtN; ig++)
	{
		t_bdd &=			NOT p_phone[		grid[0][ig]				][PHONE_VIVO]
							& NOT p_food[			grid[SqrtN - 1][ig]		][FOOD_CABBAGE];
	}

	for (unsigned iv = 1; iv < SqrtN; iv++)
	{
		for (unsigned ig = 1; ig < SqrtN; ig++)
		{
			t_bdd &=		NOT(			p_phone[		grid[iv][ig]				][PHONE_VIVO]
										XOR p_food[			grid[iv - 1][ig - 1]		][FOOD_CABBAGE]);
		}
	}
#endif
	cout << " > Constraints type 3 have been applied.\n"
		<< "Number of nodes : " << bdd_nodecount(t_bdd) << "\n"
		<< "Number of solution(s): " << std::fixed << std::setprecision(0) << (double)bdd_satcount(t_bdd) << "\n\n";









#if 0

	//  >>>>>>>>>>>>>>>>>>>>>> §°§Ô§â§Ñ§ß§Ú§é§Ö§ß§Ú§ñ IV §ä§Ú§á§Ñ. §£ §Ù§Ñ§Õ§Ñ§ß§Ú§Ú: 4. <<<<<<<<<<<<<<<<<<<<<<<<
	// 1.	`F`, §å§Ü§Ñ§Ù§í§Ó§Ñ§ð§ë§Ú§Û §ß§Ñ `I`
	// F ²»ÄÜÔÚÄÄ
	t_bdd &= !p_name[		grid[2][2]		][NAME_F];
	// I ²»ÄÜÔÚÄÄ
	t_bdd &= !p_name[		grid[0][0]		][NAME_I];

	// ¡¾ÏòÏÂÖ¸µÄÇé¿ö¡¿Î´¿¼ÂÇ½ººÏµÄÇé¿ö 4.1.1
	for (unsigned i = 0; i < SqrtN - 1; i++)
	{
		for (unsigned j = 0; j < SqrtN; j++)
		{
			t_bdd |= (				p_name[		grid[i][j]				][NAME_F]
								AND p_name[		grid[i + 1][j]		][NAME_I]);
			//cout << "F: <" << i << ", " << j << ">  " << "I: <" << i + 1 << ", " << j << ">  " << endl;
		}
	}
	// ¡¾ÏòÓÒÉÏÖ¸µÄÇé¿ö¡¿Î´¿¼ÂÇ½ººÏµÄÇé¿ö 4.1.2
	for (unsigned i = 1; i < SqrtN; i++)
	{
		for (unsigned j = 0; j < SqrtN -1; j++)
		{
			t_bdd |= !(				p_name[		grid[i][j]				][NAME_F]
								XOR p_name[		grid[i - 1][j + 1]		][NAME_I]);
			cout << "F: <" << i << ", " << j << ">  " << "I: <" << i + 1 << ", " << j << ">  " << endl;
		}
	}

	// 2.	`A`, §å§Ü§Ñ§Ù§í§Ó§Ñ§ð§ë§Ú§Û §ß§Ñ `B`


	// 3.	`D`, §å§Ü§Ñ§Ù§í§Ó§Ñ§ð§ë§Ú§Û §ß§Ñ `G`
	// 4.	`E`, §å§Ü§Ñ§Ù§í§Ó§Ñ§ð§ë§Ú§Û §ß§Ñ `H`


	// 16.	§­§Ö§Ó §ã§ã§í§Ý§Ñ§Ö§ä§ã§ñ §ß§Ñ §ã§Ý§à§ß.
	tmp_bdd_1 = bddtrue;
	tmp_bdd_2 = bddtrue;

	for (unsigned iv = 0; iv < SqrtN; iv++) tmp_bdd_1 &= !p_name[	grid[iv][0]	][4] & !p_name[		grid[iv][SqrtN - 1]	][5];
	for (unsigned ig = 0; ig < SqrtN; ig++) tmp_bdd_1 &= !p_name[	grid[0][ig]	][4] & !p_name[		grid[SqrtN - 1][ig]	][5];
	for (unsigned iv = 1; iv < SqrtN; iv++) {
		for (unsigned ig = 1; ig < SqrtN; ig++) tmp_bdd_1 &= !(p_name[grid[iv][ig]][4] ^ p_name[grid[iv - 1][ig - 1]][5]); //
	}

	for (unsigned iv = 0; iv < SqrtN; iv++) tmp_bdd_2 &= !p_name[grid[iv][0]][4] & !p_name[grid[iv][SqrtN - 1]][5];
	for (unsigned iv = 0; iv < SqrtN; iv++) { /*0 1 2*/
		for (unsigned ig = 1; ig < SqrtN; ig++) /* 1 2 */
			tmp_bdd_2 &= !(p_name[grid[iv][ig]][4] ^ p_name[grid[iv][ig-1]][5]);
	}
	t_bdd &= tmp_bdd_1 | tmp_bdd_2;

	// 17.	§£§à§Ý§Ü §ã§ã§í§Ý§Ñ§Ö§ä§ã§ñ §ß§Ñ §à§Ý§Ö§ß§î.
	tmp_bdd_1 = bddtrue;
	tmp_bdd_2 = bddtrue;

	for (unsigned iv = 0; iv < SqrtN; iv++) tmp_bdd_1 &= !p_food[grid[iv][0]][6] & !p_tel_num[grid[iv][SqrtN - 1]][0];
	for (unsigned ig = 0; ig < SqrtN; ig++) tmp_bdd_1 &= !p_food[grid[0][ig]][6] & !p_tel_num[grid[SqrtN - 1][ig]][0];
	for (unsigned iv = 1; iv < SqrtN; iv++) {
		for (unsigned ig = 1; ig < SqrtN; ig++)
			tmp_bdd_1 &= !(p_food[grid[iv][ig]][6] ^ p_tel_num[grid[iv - 1][ig - 1]][0]);
	}

	for (unsigned iv = 0; iv < SqrtN; iv++) tmp_bdd_2 &= !p_food[grid[iv][0]][6] & !p_tel_num[grid[iv][SqrtN - 1]][0];
	for (unsigned iv = 0; iv < SqrtN; iv++) { /*0 1 2*/
		for (unsigned ig = 1; ig < SqrtN; ig++) /* 1 2 */
			tmp_bdd_2 &= !(p_food[grid[iv][ig]][6] ^ p_tel_num[grid[iv][ig - 1]][0]);
	}
	t_bdd &= tmp_bdd_1 | tmp_bdd_2;

	// 18. §£§Ö§â§Ñ §ã§ã§í§Ý§Ñ§Ö§ä§ã§ñ §ß§Ñ §¬§Ú§â§Ú§Ý§Ý§Ñ.
	tmp_bdd_1 = bddtrue;
	tmp_bdd_2 = bddtrue;

	for (unsigned iv = 0; iv < SqrtN; iv++) tmp_bdd_1 &= !p_tel_num[grid[iv][0]][4] & !p_tel_num[grid[iv][SqrtN - 1]][1];
	for (unsigned ig = 0; ig < SqrtN; ig++) tmp_bdd_1 &= !p_tel_num[grid[0][ig]][4] & !p_tel_num[grid[SqrtN - 1][ig]][1];
	for (unsigned iv = 1; iv < SqrtN; iv++) {
		for (unsigned ig = 1; ig < SqrtN; ig++) tmp_bdd_1 &= !(p_tel_num[grid[iv][ig]][4] ^ p_tel_num[grid[iv - 1][ig - 1]][1]);
	}

	for (unsigned iv = 0; iv < SqrtN; iv++) tmp_bdd_2 &= !p_tel_num[grid[iv][0]][4] & !p_tel_num[grid[iv][SqrtN - 1]][1];
	for (unsigned iv = 0; iv < SqrtN; iv++) { /*0 1 2*/
		for (unsigned ig = 1; ig < SqrtN; ig++) /* 1 2 */
			tmp_bdd_2 &= !(p_tel_num[grid[iv][ig]][4] ^ p_tel_num[grid[iv][ig - 1]][1]);
	}
	t_bdd &= tmp_bdd_1 | tmp_bdd_2;
#endif

	cout << " > Constraints type 4 have been applied.\n"
		<< "Number of nodes : " << bdd_nodecount(t_bdd) << "\n"
		<< "Number of solution(s): " << std::fixed << std::setprecision(0) << (double)bdd_satcount(t_bdd) << "\n\n";







	// >>>>>>>>>>>>>>>>>>>>>> §°§Ô§â§Ñ§ß§Ú§é§Ö§ß§Ú§Ö VI §ä§Ú§á§Ñ.
	for (unsigned i = 0; i < N; i++)
	{
		bdd temp1 = bddfalse;
		bdd temp2 = bddfalse;
		bdd temp3 = bddfalse;
		bdd temp4 = bddfalse;

		for (unsigned j = 0; j < N; j++)
		{
			temp1 |= p_name[i][j];
			temp2 |= p_tel_num[i][j];
			temp3 |= p_phone[i][j];
			temp4 |= p_food[i][j];
		}
		t_bdd &= temp1 & temp2 & temp3 & temp4;
	}
	cout << " > Constraints type 6 have been applied.\n"
		<< "Number of nodes : " << bdd_nodecount(t_bdd) << "\n"
		<< "Number of solution(s): " << std::fixed << std::setprecision(0) << (double)bdd_satcount(t_bdd) << "\n\n";


	//§°§Ô§â§Ñ§ß§Ú§é§Ö§ß§Ú§Ö V §ä§Ú§á§Ñ.
	for (unsigned j = 0; j < N; j++) {
		for (unsigned i = 0; i < N - 1; i++) {
			for (unsigned k = i + 1; k < N; k++) {
				t_bdd &= p_name[i][j] >> !p_name[k][j];
				t_bdd &= p_tel_num[i][j] >> !p_tel_num[k][j];
				t_bdd &= p_phone[i][j] >> !p_phone[k][j];
				t_bdd &= p_food[i][j] >> !p_food[k][j];
			}
		}
	}
	cout << " > Constraints type 5 have been applied.\n"
		<< "Number of nodes : " << bdd_nodecount(t_bdd) << "\n"
		<< "Number of solution(s): " << std::fixed << std::setprecision(0) << (double)bdd_satcount(t_bdd) << "\n\n";


	// §Ó§í§Ó§à§Õ §â§Ö§Ù§å§Ý§î§ä§Ñ§ä§à§Ó
	out.open("out.txt");
	unsigned satcount = (unsigned)bdd_satcount(t_bdd);
	out << satcount << " solution(s):\n" << endl;
	if (satcount) bdd_allsat(t_bdd, fun);
	out.close();

	//------------------------------
	out.open("dot_all.txt");
	out << bdddot << t_bdd;
	out.close();
	//------------------------------

	bdd_done(); // §Ù§Ñ§Ó§Ö§â§ê§Ö§ß§Ú§Ö §â§Ñ§Ò§à§ä§í §Ò§Ú§Ò§Ý§Ú§à§ä§Ö§Ü§Ú
}

// §¯§Ú§Ø§Ö §â§Ö§Ñ§Ý§Ú§Ù§Ñ§è§Ú§ñ §æ§å§ß§Ü§è§Ú§Û, §å§á§â§Ñ§Ó§Ý§ñ§ð§ë§Ú§ç §Ó§í§Ó§à§Õ§à§Þ §â§Ö§Ù§å§Ý§î§ä§Ñ§ä§à§Ó.
// §²§Ö§Ü§à§Þ§Ö§ß§Õ§å§Ö§ä§ã§ñ §ã§Ñ§Þ§à§ã§ä§à§ñ§ä§Ö§Ý§î§ß§à §ã §ß§Ú§Þ§Ú §à§Ù§ß§Ñ§Ü§à§Þ§Ú§ä§î§ã§ñ.
// §£ §ã§à§Ò§ã§ä§Ó§Ö§ß§ß§í§ç §Ù§Ñ§Õ§Ñ§ß§Ú§ñ§ç §ã§Ý§Ö§Õ§å§Ö§ä §Ú§ã§á§à§Ý§î§Ù§à§Ó§Ñ§ä§î §ï§ä§Ú §æ§å§ß§Ü§è§Ú§Ú §Ú§Ý§Ú §á§â§Ú§Õ§å§Þ§Ñ§ä§î §ã§à§Ò§ã§ä§Ó§Ö§ß§ß§í§Ö.

char var[N_VAR];

void print(void)
{
	for (unsigned i = 0; i < N; i++)
	{
		out << i << ": ";
		for (unsigned j = 0; j < M; j++)
		{
			unsigned J = i * M * LOG_N + j * LOG_N;
			unsigned num = 0;
			for (unsigned k = 0; k < LOG_N; k++) num += (unsigned)(var[J + k] << k);
			out << num << ' ';
		}
		out << endl;
	}
	out << endl;
}

void build(char* varset, unsigned n, unsigned I)
{
	if (I == n - 1)
	{
		if (varset[I] >= 0)
		{
			var[I] = varset[I];
			print();
			return;
		}
		var[I] = 0;
		print();
		var[I] = 1;
		print();
		return;
	}
	if (varset[I] >= 0)
	{
		var[I] = varset[I];
		build(varset, n, I + 1);
		return;
	}
	var[I] = 0;
	build(varset, n, I + 1);
	var[I] = 1;
	build(varset, n, I + 1);
}

void fun(char* varset, int size)
{
	build(varset, size, 0);
}

#endif